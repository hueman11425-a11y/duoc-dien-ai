import streamlit as st
import google.generativeai as genai

# Import c√°c file ch√∫ng ta ƒë√£ t√°ch
import auth
import utils

# --- CSS T√ôY CH·ªàNH CHO THANH CU·ªòN ---
st.markdown("""
    <style>
    .scrollable-container {
        border: 1px solid #262730;
        border-radius: 0.5rem;
        padding: 10px;
        max-height: 300px; /* Chi·ªÅu cao t·ªëi ƒëa c·ªßa khung */
        overflow-y: auto; /* Th√™m thanh cu·ªôn khi c·∫ßn */
    }
    .scrollable-container .stButton>button {
        width: 100%;
        text-align: left;
    }
    </style>
""", unsafe_allow_html=True)


# --- KH·ªûI T·∫†O C√ÅC D·ªäCH V·ª§ ---
firebase_app = auth.initialize_firebase_app()
if not firebase_app:
    st.stop()

firebase_auth = firebase_app.auth()
firebase_db = firebase_app.database()

try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except (FileNotFoundError, KeyError):
    st.error("L·ªñI: Vui l√≤ng c·∫•u h√¨nh GOOGLE_API_KEY trong secrets.toml.")
    st.stop()

# --- KH·ªûI T·∫†O TR·∫†NG TH√ÅI PHI√äN ---
if 'user_data_loaded' not in st.session_state: st.session_state.user_data_loaded = False
if "query_result" not in st.session_state: st.session_state.query_result = None
# Kh·ªüi t·∫°o history cho c·∫£ kh√°ch v√† ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
if 'history' not in st.session_state: st.session_state.history = []


# --- H√ÄM LOGIC TRUNG T√ÇM ---
def run_lookup(drug_name):
    st.session_state.query_result = None # X√≥a k·∫øt qu·∫£ c≈© tr∆∞·ªõc khi tra c·ª©u
    user_info = st.session_state.get("user_info")
    is_pro = st.session_state.get("pro_access", False)

    with st.spinner(f"ƒêang tra c·ª©u '{drug_name}'..."):
        # B∆∞·ªõc 1: Ki·ªÉm tra trong kho l∆∞u tr·ªØ vƒ©nh vi·ªÖn (ch·ªâ cho ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p)
        if user_info:
            cached_result = utils.load_user_result(firebase_db, user_info, drug_name)
            if cached_result:
                st.session_state.query_result = cached_result
                # C·∫≠p nh·∫≠t l·∫°i history list ph√≤ng tr∆∞·ªùng h·ª£p n√≥ ch∆∞a ƒë·ªìng b·ªô
                if drug_name not in st.session_state.history:
                     st.session_state.history.insert(0, drug_name)
                return

        # B∆∞·ªõc 2: N·∫øu kh√¥ng c√≥, g·ªçi API
        api_result, identified_name = utils.get_drug_info_from_api(drug_name, is_pro)
        
        # B∆∞·ªõc 3: X·ª≠ l√Ω k·∫øt qu·∫£
        st.session_state.query_result = api_result
        if user_info:
            # N·∫øu l√† ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p, l∆∞u k·∫øt qu·∫£ m·ªõi v√†o kho vƒ©nh vi·ªÖn
            if identified_name:
                updated_history = utils.save_new_result(firebase_db, user_info, identified_name, api_result)
                st.session_state.history = updated_history
        else:
            # N·∫æU L√Ä KH√ÅCH, L∆ØU V√ÄO L·ªäCH S·ª¨ T·∫†M TH·ªúI
            if identified_name:
                if identified_name not in st.session_state.history:
                    st.session_state.history.insert(0, identified_name)
                    if len(st.session_state.history) > 10: # Gi·ªõi h·∫°n 10 m·ª•c cho kh√°ch
                        st.session_state.history.pop()


# --- B·∫ÆT ƒê·∫¶U GIAO DI·ªÜN ---
st.set_page_config(page_title="D∆∞·ª£c ƒêi·ªÉn AI", page_icon="üíä")

# Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p v√† l·∫•y tr·∫°ng th√°i
is_logged_in = auth.display_auth_forms(firebase_auth)

# --- T·∫¢I D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG KHI ƒêƒÇNG NH·∫¨P ---
if is_logged_in and not st.session_state.user_data_loaded:
    user_info = st.session_state.user_info
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu c·ªßa b·∫°n..."):
        history, collections = utils.load_user_data(firebase_db, user_info)
        st.session_state.history = history
        st.session_state.collections = collections
    st.session_state.user_data_loaded = True

# --- GIAO DI·ªÜN CH√çNH ---
st.title("D∆∞·ª£c ƒêi·ªÉn AI üíä")
st.caption("D·ª± √°n ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi group C√ÇCK v√† AI")

st.text_input("Nh·∫≠p t√™n thu·ªëc (bi·ªát d∆∞·ª£c ho·∫∑c ho·∫°t ch·∫•t):", key="main_input")
if st.button("Tra c·ª©u"):
    if st.session_state.main_input:
        run_lookup(st.session_state.main_input)
    else:
        st.warning("Vui l√≤ng nh·∫≠p t√™n thu·ªëc tr∆∞·ªõc khi tra c·ª©u.")

# --- HI·ªÇN TH·ªä K·∫æT QU·∫¢ TRA C·ª®U ---
if st.session_state.query_result:
    result_to_display = st.session_state.query_result
    if result_to_display.startswith("‚ùå L·ªói:"):
        st.error(result_to_display)
    else:
        st.markdown(result_to_display)
        # Ph·∫ßn l∆∞u v√†o b·ªô s∆∞u t·∫≠p ch·ªâ hi·ªán ra khi c√≥ k·∫øt qu·∫£ th√†nh c√¥ng
        identified_name_from_result = result_to_display.split("**")[1] if "**" in result_to_display else None
        if is_logged_in and identified_name_from_result:
            st.markdown("---")
            st.subheader(f"L∆∞u '{identified_name_from_result}' v√†o b·ªô s∆∞u t·∫≠p")
            collections = st.session_state.get("collections", {})
            if not collections:
                st.info("B·∫°n ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o. H√£y t·∫°o ·ªü thanh c√¥ng c·ª• b√™n tr√°i.")
            else:
                col1, col2 = st.columns([2,1])
                with col1:
                    selected_collection = st.selectbox("Ch·ªçn b·ªô s∆∞u t·∫≠p:", options=list(collections.keys()), key="collection_selector")
                with col2:
                    st.write("") 
                    st.write("")
                    if st.button("Th√™m thu·ªëc", use_container_width=True):
                        user_info = st.session_state.user_info
                        message = utils.add_drug_to_collection(firebase_db, user_info, selected_collection, identified_name_from_result)
                        st.toast(message)
                        _, collections_new = utils.load_user_data(firebase_db, user_info)
                        st.session_state.collections = collections_new
                        st.rerun()


# --- SIDEBAR ---
with st.sidebar:
    st.header("L·ªãch s·ª≠ tra c·ª©u")
    
    # Khung ch·ª©a c√≥ thanh cu·ªôn √°p d·ª•ng cho c·∫£ kh√°ch v√† ng∆∞·ªùi d√πng
    history_container = st.container(height=300)
    with history_container:
        if not st.session_state.history:
            st.info("Ch∆∞a c√≥ thu·ªëc n√†o ƒë∆∞·ª£c tra c·ª©u.")
        else:
            for drug in st.session_state.history:
                col1, col2 = st.columns([0.8, 0.2])
                with col1:
                    if st.button(drug, key=f"history_{drug}", use_container_width=True):
                        run_lookup(drug)
                with col2:
                    if is_logged_in:
                        with st.popover("‚ûï", use_container=True):
                            collections = st.session_state.get("collections", {})
                            if not collections:
                                st.write("Ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p.")
                            else:
                                for coll_name in collections.keys():
                                    if st.button(f"Th√™m v√†o '{coll_name}'", key=f"add_{drug}_to_{coll_name}"):
                                        user_info = st.session_state.user_info
                                        message = utils.add_drug_to_collection(firebase_db, user_info, coll_name, drug)
                                        st.toast(message)
                                        _, collections_new = utils.load_user_data(firebase_db, user_info)
                                        st.session_state.collections = collections_new
                                        st.rerun()

    st.markdown("---")

    # --- PH·∫¶N B·ªò S∆ØU T·∫¨P ---
    if is_logged_in:
        st.header("B·ªô s∆∞u t·∫≠p")
        def handle_create_collection():
            coll_name = st.session_state.new_collection_input
            success, message = utils.create_new_collection(firebase_db, st.session_state.user_info, coll_name)
            if success:
                st.success(message)
                st.session_state.collections[coll_name] = []
                st.session_state.new_collection_input = ""
            else:
                st.error(message)

        st.text_input("T√™n b·ªô s∆∞u t·∫≠p m·ªõi:", key="new_collection_input")
        st.button("T·∫°o m·ªõi", on_click=handle_create_collection)

        collections = st.session_state.get("collections", {})
        for name, drugs in collections.items():
            with st.expander(f"{name} ({len(drugs)}/{utils.DRUGS_PER_COLLECTION_LIMIT} thu·ªëc)"):
                if not drugs:
                    st.write("B·ªô s∆∞u t·∫≠p n√†y tr·ªëng.")
                else:
                    for drug in drugs:
                        if st.button(drug, key=f"collection_{name}_{drug}"):
                            run_lookup(drug)
        st.markdown(f"ƒê√£ t·∫°o {len(collections)}/{utils.COLLECTION_LIMIT} b·ªô s∆∞u t·∫≠p.")
        st.markdown("---")

    with st.container(border=True):
        st.write("**B·∫°n c√≥ √Ω t∆∞·ªüng ƒë·ªÉ c·∫£i thi·ªán ·ª©ng d·ª•ng?**")
        st.link_button("G·ª≠i ph·∫£n h·ªìi ngay!", url="https://forms.gle/M44GDS4hJ7LpY7b98")

    if is_logged_in:
        st.header("Truy c·∫≠p Pro")
        if st.session_state.get("pro_access"):
            st.success("B·∫°n ƒë√£ c√≥ quy·ªÅn truy c·∫≠p Pro.")
        else:
            pro_code_input = st.text_input("Nh·∫≠p m√£ truy c·∫≠p Pro:", type="password")
            if st.button("X√°c th·ª±c"):
                is_valid, message = utils.verify_code(pro_code_input)
                if is_valid:
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)
