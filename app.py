import streamlit as st
import google.generativeai as genai
import google.generativeai.types as genai_types
import google.api_core.exceptions as ga_ex
import datetime
import pandas as pd
import gspread
from gspread_dataframe import get_as_dataframe
from gspread.exceptions import SpreadsheetNotFound, WorksheetNotFound

# --- KI·ªÇM TRA TR·∫†NG TH√ÅI B·∫¢O TR√å ---
is_maintenance = st.secrets.get("maintenance_mode", False) 
if is_maintenance:
    st.set_page_config(page_title="B·∫£o tr√¨", page_icon="üõ†Ô∏è")
    st.title("üõ†Ô∏è D∆∞·ª£c ƒêi·ªÉn AI ƒëang ƒë∆∞·ª£c b·∫£o tr√¨")
    message = st.secrets.get("maintenance_message", "·ª®ng d·ª•ng ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng quay l·∫°i sau.")
    st.info(message)
    st.stop()

# --- 1. KH·ªûI T·∫†O TR·∫†NG TH√ÅI PHI√äN (SESSION STATE) ---
if 'history' not in st.session_state:
    st.session_state.history = []
if 'pro_access' not in st.session_state:
    st.session_state.pro_access = False

# --- 2. C·∫§U H√åNH V√Ä T·∫¢I PROMPTS ---
def load_prompt(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        st.error(f"L·ªñI: Kh√¥ng t√¨m th·∫•y file prompt t·∫°i '{file_path}'. Vui l√≤ng ƒë·∫£m b·∫£o file n√†y t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c v·ªõi app.py.")
        st.stop()

try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except (FileNotFoundError, KeyError):
    st.error("L·ªñI: Vui l√≤ng t·∫°o file .streamlit/secrets.toml v√† th√™m `GOOGLE_API_KEY = 'KEY_CUA_BAN'` v√†o ƒë√≥.")
    st.stop()

PROMPT_NHAN_DIEN = load_prompt("prompt_nhandien.txt")
PROMPT_REGULAR = load_prompt("prompt_regular.txt")
PROMPT_PRO = load_prompt("prompt_pro.txt")

# --- 3. C√ÅC H√ÄM X·ª¨ L√ù ---

# --- H√ÄM X·ª¨ L√ù M√É TRUY C·∫¨P (PHI√äN B·∫¢N GSPREAD) ---
@st.cache_data(ttl=600)
def get_access_codes_df():
    try:
        credentials = st.secrets.connections.gsheets.credentials
        gspread_client = gspread.service_account_from_dict(credentials)
        spreadsheet_name = st.secrets.connections.gsheets.spreadsheet
        spreadsheet = gspread_client.open(spreadsheet_name)
        worksheet = spreadsheet.sheet1
        codes_df = get_as_dataframe(worksheet)
        return codes_df
    except SpreadsheetNotFound:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y Google Sheet c√≥ t√™n '{st.secrets.connections.gsheets.spreadsheet}'. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi t·ªõi Google Sheets. Vui l√≤ng th·ª≠ l·∫°i sau.")
        print(f"GSpread Error: {e}")
        return pd.DataFrame()

def verify_code(user_code):
    if not user_code:
        return False, "Vui l√≤ng nh·∫≠p m√£ truy c·∫≠p."
    codes_df = get_access_codes_df()
    if codes_df.empty:
        return False, "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu m√£ truy c·∫≠p. Vui l√≤ng th·ª≠ l·∫°i."
    codes_df.dropna(subset=['code'], inplace=True)
    codes_df['code'] = codes_df['code'].astype(str)
    matched_code_series = codes_df[codes_df['code'] == user_code]
    if matched_code_series.empty:
        return False, "M√£ kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y."
    code_info = matched_code_series.iloc[0]
    code_type = code_info['type']
    if code_type == 'permanent':
        st.session_state.pro_access = True
        return True, f"X√°c th·ª±c th√†nh c√¥ng! Ch√†o m·ª´ng {code_info.get('owner', 'Pro User')}."
    if code_type == 'temporary':
        try:
            created_date = pd.to_datetime(code_info['created_at']).date()
            today = datetime.date.today()
            days_passed = (today - created_date).days
            if 0 <= days_passed <= 7:
                st.session_state.pro_access = True
                return True, f"X√°c th·ª±c th√†nh c√¥ng! M√£ c·ªßa b·∫°n c√≤n hi·ªáu l·ª±c {7 - days_passed} ng√†y."
            else:
                return False, "M√£ t·∫°m th·ªùi c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n."
        except Exception:
            return False, "L·ªói ƒë·ªãnh d·∫°ng ng√†y th√°ng trong file Google Sheet."
    return False, "Lo·∫°i m√£ kh√¥ng x√°c ƒë·ªãnh."

# --- H√ÄM X·ª¨ L√ù D∆Ø·ª¢C ƒêI·ªÇN ---
@st.cache_resource
def get_regular_model():
    model_name = st.secrets.get("models", {}).get("regular", "gemini-2.5-flash-lite")
    return genai.GenerativeModel(model_name)

@st.cache_resource
def get_pro_model():
    model_name = st.secrets.get("models", {}).get("pro", "gemini-pro")
    return genai.GenerativeModel(model_name)

@st.cache_data(ttl="6h")
def get_drug_info(drug_name, is_pro_user=False):
    # B∆∞·ªõc 1: Lu√¥n d√πng model regular ƒë·ªÉ nh·∫≠n di·ªán ho·∫°t ch·∫•t cho nhanh v√† r·∫ª
    identifier_model = get_regular_model()
    prompt_nhan_dien_final = PROMPT_NHAN_DIEN.format(drug_name=drug_name)
    response_nhan_dien = identifier_model.generate_content(prompt_nhan_dien_final)
    
    response_text = response_nhan_dien.text
    try:
        hoat_chat_goc = response_text.split("Output:")[1].strip()
    except IndexError:
        hoat_chat_goc = response_text.strip()

    if hoat_chat_goc == "INVALID" or not hoat_chat_goc:
        return f"‚ùå L·ªói: '{drug_name}' kh√¥ng ƒë∆∞·ª£c nh·∫≠n d·∫°ng l√† m·ªôt t√™n thu·ªëc h·ª£p l·ªá."

    # B∆∞·ªõc 2: Ch·ªçn model v√† prompt ph√π h·ª£p ƒë·ªÉ ph√¢n t√≠ch chuy√™n s√¢u
    if is_pro_user:
        analysis_model = get_pro_model()
        analysis_prompt = PROMPT_PRO
    else:
        analysis_model = get_regular_model()
        analysis_prompt = PROMPT_REGULAR

    generation_config = {"max_output_tokens": 8192, "temperature": 0.6}
    full_prompt = f"{analysis_prompt}\n\nH√£y tra c·ª©u v√† tr√¨nh b√†y th√¥ng tin cho thu·ªëc sau ƒë√¢y: **{hoat_chat_goc}**"
    
    response_phan_tich = analysis_model.generate_content(full_prompt, generation_config=generation_config)
    final_response = f"‚úÖ Ho·∫°t ch·∫•t ƒë√£ nh·∫≠n di·ªán: **{hoat_chat_goc}**\n\n---\n\n{response_phan_tich.text}"
    return final_response

# --- 4. H√ÄM LOGIC TRUNG T√ÇM ---
def run_lookup(drug_name):
    try:
        with st.spinner(f"ƒêang tra c·ª©u '{drug_name}'..."):
            is_pro = st.session_state.get("pro_access", False)
            final_result = get_drug_info(drug_name, is_pro_user=is_pro)
        if not final_result.startswith("‚ùå L·ªói:"):
            st.markdown(final_result)
            if drug_name not in st.session_state.history:
                st.session_state.history.insert(0, drug_name)
                if len(st.session_state.history) > 10:
                     st.session_state.history.pop()
        else:
            st.error(final_result)
    except Exception as e:
        st.error("üí• L·ªói kh√¥ng x√°c ƒë·ªãnh: M·ªôt s·ª± c·ªë kh√¥ng mong mu·ªën ƒë√£ x·∫£y ra.")
        st.exception(e)

# --- 5. GIAO DI·ªÜN V√Ä LOGIC CH√çNH ---
st.set_page_config(page_title="D∆∞·ª£c ƒêi·ªÉn AI", page_icon="üíä")
st.title("D∆∞·ª£c ƒêi·ªÉn AI üíä")
st.caption("D·ª± √°n ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi group C√ÇCK v√† AI")

# --- Sidebar ---
st.sidebar.header("L·ªãch s·ª≠ tra c·ª©u")
if not st.session_state.history:
    st.sidebar.info("Ch∆∞a c√≥ thu·ªëc n√†o ƒë∆∞·ª£c tra c·ª©u.")
else:
    for drug in st.session_state.history:
        if st.sidebar.button(drug, key=f"history_{drug}", use_container_width=True):
            run_lookup(drug)

st.sidebar.markdown("---")
with st.sidebar.container(border=True):
    st.write("**B·∫°n c√≥ √Ω t∆∞·ªüng ƒë·ªÉ c·∫£i thi·ªán ·ª©ng d·ª•ng?**")
    st.link_button( "G·ª≠i ph·∫£n h·ªìi ngay!", url="https://forms.gle/M44GDS4hJ7LpY7b98", help="M·ªü form g√≥p √Ω trong m·ªôt tab m·ªõi" )
st.sidebar.markdown("---")

st.sidebar.header("Truy c·∫≠p Pro")
if st.session_state.get("pro_access"):
    st.sidebar.success("B·∫°n ƒë√£ c√≥ quy·ªÅn truy c·∫≠p Pro.")
else:
    pro_code_input = st.sidebar.text_input("Nh·∫≠p m√£ truy c·∫≠p Pro:", type="password", help="Nh·∫≠p m√£ c·ªßa b·∫°n v√† b·∫•m n√∫t X√°c th·ª±c.")
    if st.sidebar.button("X√°c th·ª±c"):
        is_valid, message = verify_code(pro_code_input)
        if is_valid:
            st.sidebar.success(message)
            st.rerun() 
        else:
            st.sidebar.error(message)

# --- Main page ---
drug_name_input = st.text_input("Nh·∫≠p t√™n thu·ªëc (bi·ªát d∆∞·ª£c ho·∫∑c ho·∫°t ch·∫•t):", key="main_input")
lookup_button = st.button("Tra c·ª©u")

if lookup_button:
    if not drug_name_input:
        st.warning("Vui l√≤ng nh·∫≠p t√™n thu·ªëc tr∆∞·ªõc khi tra c·ª©u.")
    else:
        run_lookup(drug_name_input)
