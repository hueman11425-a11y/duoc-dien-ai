import streamlit as st
import google.generativeai as genai

# Import c√°c file ch√∫ng ta ƒë√£ t√°ch
import auth
import utils

# --- KH·ªûI T·∫†O C√ÅC D·ªäCH V·ª§ ---
# Kh·ªüi t·∫°o Firebase App v√† c√°c d·ªãch v·ª• con
firebase_app = auth.initialize_firebase_app()
if not firebase_app:
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c Firebase

firebase_auth = firebase_app.auth()
firebase_db = firebase_app.database() # L·∫•y ƒë·ªëi t∆∞·ª£ng database ƒë·ªÉ t∆∞∆°ng t√°c

# C·∫•u h√¨nh Google AI
try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except (FileNotFoundError, KeyError):
    st.error("L·ªñI: Vui l√≤ng c·∫•u h√¨nh GOOGLE_API_KEY trong secrets.toml.")
    st.stop()

# --- KI·ªÇM TRA TR·∫†NG TH√ÅI B·∫¢O TR√å ---
is_maintenance = st.secrets.get("maintenance_mode", False)
if is_maintenance:
    st.set_page_config(page_title="B·∫£o tr√¨", page_icon="üõ†Ô∏è")
    st.title("üõ†Ô∏è D∆∞·ª£c ƒêi·ªÉn AI ƒëang ƒë∆∞·ª£c b·∫£o tr√¨")
    message = st.secrets.get("maintenance_message", "·ª®ng d·ª•ng ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng quay l·∫°i sau.")
    st.info(message)
    st.stop()

# --- KH·ªûI T·∫†O TR·∫†NG TH√ÅI PHI√äN ---
if 'history' not in st.session_state: st.session_state.history = []
if 'pro_access' not in st.session_state: st.session_state.pro_access = False
if 'user_data_loaded' not in st.session_state: st.session_state.user_data_loaded = False
if 'collections' not in st.session_state: st.session_state.collections = {}
if 'last_drug_searched' not in st.session_state: st.session_state.last_drug_searched = None

# --- H√ÄM LOGIC TRUNG T√ÇM ---
def run_lookup(drug_name):
    st.session_state.last_drug_searched = None # Reset thu·ªëc v·ª´a tra c·ª©u
    try:
        is_pro = st.session_state.get("pro_access", False)
        final_result = utils.get_drug_info(drug_name, is_pro_user=is_pro)
        
        if not final_result.startswith("‚ùå L·ªói:"):
            st.markdown(final_result)
            user_info = st.session_state.get("user_info")
            hoat_chat_da_nhan_dien = final_result.split("**")[1]
            st.session_state.last_drug_searched = hoat_chat_da_nhan_dien # L∆∞u l·∫°i thu·ªëc v·ª´a tra c·ª©u th√†nh c√¥ng
            
            if user_info: # N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
                utils.save_drug_to_history(firebase_db, user_info, hoat_chat_da_nhan_dien)
                st.session_state.history = utils.load_user_history(firebase_db, user_info)
            else: # N·∫øu l√† kh√°ch
                if drug_name not in st.session_state.history:
                    st.session_state.history.insert(0, drug_name)
                    if len(st.session_state.history) > 10:
                        st.session_state.history.pop()
        else:
            st.error(final_result)
    except Exception as e:
        st.error("üí• L·ªói kh√¥ng x√°c ƒë·ªãnh.")
        st.exception(e)

# --- B·∫ÆT ƒê·∫¶U GIAO DI·ªÜN ---
st.set_page_config(page_title="D∆∞·ª£c ƒêi·ªÉn AI", page_icon="üíä")

# Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p v√† l·∫•y tr·∫°ng th√°i
is_logged_in = auth.display_auth_forms(firebase_auth)

# --- T·∫¢I D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG KHI ƒêƒÇNG NH·∫¨P ---
if is_logged_in and not st.session_state.user_data_loaded:
    user_info = st.session_state.user_info
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu c·ªßa b·∫°n..."):
        st.session_state.history = utils.load_user_history(firebase_db, user_info)
        st.session_state.collections = utils.load_user_collections(firebase_db, user_info)
    st.session_state.user_data_loaded = True

# --- GIAO DI·ªÜN CH√çNH ---
st.title("D∆∞·ª£c ƒêi·ªÉn AI üíä")
st.caption("D·ª± √°n ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi group C√ÇCK v√† AI")

# --- KHUNG NH·∫¨P LI·ªÜU CH√çNH ---
drug_name_input = st.text_input("Nh·∫≠p t√™n thu·ªëc (bi·ªát d∆∞·ª£c ho·∫∑c ho·∫°t ch·∫•t):", key="main_input")
if st.button("Tra c·ª©u"):
    if not drug_name_input:
        st.warning("Vui l√≤ng nh·∫≠p t√™n thu·ªëc tr∆∞·ªõc khi tra c·ª©u.")
    else:
        run_lookup(drug_name_input)

# --- KHU V·ª∞C L∆ØU V√ÄO B·ªò S∆ØU T·∫¨P (CH·ªà HI·ªÜN KHI C·∫¶N) ---
if is_logged_in and st.session_state.last_drug_searched:
    st.markdown("---")
    st.subheader(f"L∆∞u '{st.session_state.last_drug_searched}' v√†o b·ªô s∆∞u t·∫≠p")
    
    collections = st.session_state.get("collections", {})
    if not collections:
        st.info("B·∫°n ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o. H√£y t·∫°o ·ªü thanh c√¥ng c·ª• b√™n tr√°i.")
    else:
        # --- LOGIC CHO N√öT "TH√äM THU·ªêC" D√ôNG CALLBACK ---
        def handle_add_drug_to_collection():
            user_info = st.session_state.user_info
            drug_to_add = st.session_state.last_drug_searched
            # L·∫•y collection ƒë∆∞·ª£c ch·ªçn t·ª´ session_state
            selected_collection = st.session_state.get("collection_selector")

            if utils.add_drug_to_collection(firebase_db, user_info, selected_collection, drug_to_add):
                st.success(f"ƒê√£ th√™m '{drug_to_add}' v√†o '{selected_collection}'.")
                st.session_state.collections = utils.load_user_collections(firebase_db, user_info)
            else:
                st.warning(f"'{drug_to_add}' ƒë√£ c√≥ trong '{selected_collection}'.")

        col1, col2 = st.columns([2,1])
        with col1:
            st.selectbox("Ch·ªçn b·ªô s∆∞u t·∫≠p:", options=list(collections.keys()), key="collection_selector")
        with col2:
            st.write("") 
            st.write("")
            st.button("Th√™m thu·ªëc", on_click=handle_add_drug_to_collection, use_container_width=True)

# --- SIDEBAR ---
with st.sidebar:
    st.header("L·ªãch s·ª≠ tra c·ª©u")
    if not st.session_state.history:
        st.info("Ch∆∞a c√≥ thu·ªëc n√†o ƒë∆∞·ª£c tra c·ª©u.")
    else:
        for drug in st.session_state.history:
            if st.button(drug, key=f"history_{drug}", use_container_width=True):
                st.session_state.main_input = drug
                st.rerun()

    st.markdown("---")

    # --- PH·∫¶N B·ªò S∆ØU T·∫¨P TR√äN SIDEBAR ---
    if is_logged_in:
        st.header("B·ªô s∆∞u t·∫≠p")
        
        # --- LOGIC "T·∫†O M·ªöI" D√ôNG CALLBACK ---
        def handle_create_collection():
            collection_name_to_create = st.session_state.new_collection_input
            if not collection_name_to_create or collection_name_to_create.isspace():
                st.error("T√™n b·ªô s∆∞u t·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return

            user_info = st.session_state.user_info
            success, message = utils.create_new_collection(firebase_db, user_info, collection_name_to_create)
            if success:
                st.success(message)
                st.session_state.collections = utils.load_user_collections(firebase_db, user_info)
                # X√≥a ch·ªØ trong √¥ input sau khi t·∫°o th√†nh c√¥ng - an to√†n trong callback
                st.session_state.new_collection_input = ""
            else:
                st.error(message)

        st.text_input("T√™n b·ªô s∆∞u t·∫≠p m·ªõi:", key="new_collection_input")
        st.button("T·∫°o m·ªõi", on_click=handle_create_collection)

        collections = st.session_state.get("collections", {})
        if not collections:
            st.info("Ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o.")
        else:
            for name, drugs in collections.items():
                with st.expander(f"{name} ({len(drugs)} thu·ªëc)"):
                    if not drugs:
                        st.write("B·ªô s∆∞u t·∫≠p n√†y tr·ªëng.")
                    else:
                        for drug in drugs:
                            if st.button(drug, key=f"collection_{name}_{drug}", use_container_width=True):
                                st.session_state.main_input = drug
                                st.rerun()
        st.markdown("---")

    with st.container(border=True):
        st.write("**B·∫°n c√≥ √Ω t∆∞·ªüng ƒë·ªÉ c·∫£i thi·ªán ·ª©ng d·ª•ng?**")
        st.link_button("G·ª≠i ph·∫£n h·ªìi ngay!", url="https://forms.gle/M44GDS4hJ7LpY7b98", help="M·ªü form g√≥p √Ω trong m·ªôt tab m·ªõi")

    if is_logged_in:
        st.header("Truy c·∫≠p Pro")
        if st.session_state.get("pro_access"):
            st.success("B·∫°n ƒë√£ c√≥ quy·ªÅn truy c·∫≠p Pro.")
        else:
            pro_code_input = st.text_input("Nh·∫≠p m√£ truy c·∫≠p Pro:", type="password", help="Nh·∫≠p m√£ c·ªßa b·∫°n v√† b·∫•m n√∫t X√°c th·ª±c.")
            if st.button("X√°c th·ª±c"):
                is_valid, message = utils.verify_code(pro_code_input)
                if is_valid:
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)
