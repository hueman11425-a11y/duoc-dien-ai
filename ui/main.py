import streamlit as st
from utils import drugs, firebase, constants, prescription
import markdown2
import win32clipboard
import re

# ===========================
# H√ÄM H·ªñ TR·ª¢: Chu·∫©n h√≥a danh s√°ch s·ªë v√† Markdown ‚Üí HTML
# ===========================
def normalize_numbered_list(text: str) -> str:
    """
    Chu·∫©n h√≥a c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë + '.'.
    B·ªè c√°c d√≤ng tr·ªëng.
    """
    lines = text.splitlines()
    new_lines = []
    for line in lines:
        line_strip = line.strip()
        if not line_strip:
            continue
        match = re.match(r'^(\d+)\.\s*(\S.+)$', line_strip)
        if match:
            new_lines.append(f"{match.group(1)}. {match.group(2)}")
        else:
            new_lines.append(line_strip)
    return "\n".join(new_lines)

def generate_styled_html(markdown_text: str) -> str:
    """
    Convert Markdown ‚Üí HTML ƒë·∫πp, gi·ªØ danh s√°ch s·ªë,
    lo·∫°i b·ªè d√≤ng tr·ªëng, √°p d·ª•ng font Segoe UI inline.
    """
    lines = [l for l in markdown_text.splitlines() if l.strip()]
    markdown_text = "\n".join(lines)
    markdown_text = normalize_numbered_list(markdown_text)
    html_body = markdown2.markdown(
        markdown_text,
        extras=["fenced-code-blocks", "tables", "break-on-newline"]
    )
    html = f'<div style="font-family:\'Segoe UI\'; font-size:12pt; color:#222; line-height:1.5;">{html_body}</div>'
    return html

def copy_html_to_clipboard(html: str):
    """
    Copy HTML v√†o clipboard (Windows) chu·∫©n CF_HTML
    """
    html_bytes = html.encode("utf-8")
    win32clipboard.OpenClipboard()
    win32clipboard.EmptyClipboard()
    fmt = win32clipboard.RegisterClipboardFormat("HTML Format")
    win32clipboard.SetClipboardData(fmt, html_bytes)
    win32clipboard.CloseClipboard()

# ===========================
# TRANG TRA C·ª®U THU·ªêC
# ===========================
def render_lookup_page():
    st.header("Tra c·ª©u D∆∞·ª£c ƒëi·ªÉn üíä")
    is_logged_in = st.session_state.user_info is not None
    firebase_db = st.session_state.firebase_db
    user_info = st.session_state.user_info

    def run_lookup(drug_name: str):
        st.session_state.query_result = None
        is_pro = st.session_state.get("pro_access", False)
        with st.spinner(f"ƒêang tra c·ª©u '{drug_name}'..."):
            api_result, identified_name = drugs.get_drug_info_from_api(drug_name, is_pro)
            st.session_state.query_result = api_result
            st.session_state.identified_name = identified_name  # ‚Üê l∆∞u v√†o session_state

            if identified_name and "kh√¥ng ƒë∆∞·ª£c nh·∫≠n d·∫°ng" not in api_result:
                if is_logged_in:
                    updated_history = firebase.save_new_result(firebase_db, user_info, identified_name, api_result)
                    if updated_history is not None:
                        st.session_state.history = updated_history
                else:
                    st.session_state.guest_cache[identified_name] = api_result
                    if identified_name not in st.session_state.history:
                        st.session_state.history.insert(0, identified_name)
                        if len(st.session_state.history) > 10:
                            drug_to_remove = st.session_state.history.pop()
                            st.session_state.guest_cache.pop(drug_to_remove, None)

    search_query = st.text_input("Nh·∫≠p t√™n thu·ªëc:", key="lookup_input_field")

    if st.button("Tra c·ª©u"):
        if search_query:
            run_lookup(search_query)
        else:
            st.warning("Vui l√≤ng nh·∫≠p t√™n thu·ªëc tr∆∞·ªõc khi tra c·ª©u.")

    if st.session_state.query_result:
        result_text = st.session_state.query_result
        if result_text.startswith("‚ùå L·ªói:"):
            st.error(result_text)
        else:
            lines = result_text.split("\n", 1)
            first_line = lines[0] if lines else ""
            rest = lines[1] if len(lines) > 1 else ""
            st.markdown(
                f"<div style=\"font-family:'Segoe UI'; font-size:18pt;font-weight:bold;color:#111\">{first_line}</div>",
                unsafe_allow_html=True
            )
            st.markdown(rest.replace("\n", "  \n"))

            if st.button("üìã Sao ch√©p k·∫øt qu·∫£", key="copy_button"):
                try:
                    html_content = generate_styled_html(result_text)
                    copy_html_to_clipboard(html_content)
                    st.success("‚úÖ ƒê√£ sao ch√©p v√†o clipboard")
                except Exception as e:
                    st.error(f"‚ùå Kh√¥ng th·ªÉ sao ch√©p: {e}")

            # ===== Th√™m thu·ªëc v√†o b·ªô s∆∞u t·∫≠p =====
            if is_logged_in and st.session_state.get("identified_name"):
                drug_name = st.session_state.identified_name
                st.markdown("---")
                st.subheader(f"L∆∞u '{drug_name}' v√†o b·ªô s∆∞u t·∫≠p")
                collections = st.session_state.get("collections", {})

                if not collections:
                    st.info("B·∫°n ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o.")
                else:
                    col1, col2 = st.columns([2,1])
                    with col1:
                        sel_coll = st.selectbox("Ch·ªçn b·ªô s∆∞u t·∫≠p:", options=list(collections.keys()))
                    with col2:
                        st.write(""); st.write("")
                        if st.button("Th√™m thu·ªëc", use_container_width=True):
                            try:
                                msg = firebase.add_drug_to_collection(firebase_db, user_info, sel_coll, drug_name)
                                if msg is None:
                                    msg = f"ƒê√£ th√™m '{drug_name}' v√†o '{sel_coll}'"
                                st.toast(msg)
                                _, collections_new = firebase.load_user_data(firebase_db, user_info)
                                st.session_state.collections = collections_new
                                st.success(f"‚úÖ '{drug_name}' ƒë√£ ƒë∆∞·ª£c th√™m v√†o '{sel_coll}'")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå Kh√¥ng th·ªÉ th√™m thu·ªëc: {e}")

# ===========================
# TRANG PH√ÇN T√çCH ƒê∆†N THU·ªêC
# ===========================
def render_prescription_analysis_page():
    st.header("Ph√¢n t√≠ch ƒê∆°n thu·ªëc ü©∫")
    is_logged_in = st.session_state.user_info is not None

    if not is_logged_in:
        st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.")
        return

    st.subheader("Ph·∫ßn 1: B·ªëi c·∫£nh B·ªánh nh√¢n (Kh√¥ng b·∫Øt bu·ªôc)")
    col1, col2 = st.columns(2)
    with col1:
        conditions = st.text_area("T√¨nh tr·∫°ng b·ªánh l√Ω n·ªÅn:", height=150)
    with col2:
        allergies = st.text_area("D·ªã ·ª©ng thu·ªëc ƒë√£ bi·∫øt:", height=150)

    st.subheader("Ph·∫ßn 2: Th√¥ng tin ƒê∆°n thu·ªëc (B·∫Øt bu·ªôc)")
    prescription_text = st.text_area("D√°n n·ªôi dung ƒë∆°n thu·ªëc:", height=250)

    if st.button("Ph√¢n t√≠ch ƒê∆°n thu·ªëc", type="primary"):
        if not prescription_text.strip():
            st.error("Vui l√≤ng nh·∫≠p th√¥ng tin ƒë∆°n thu·ªëc.")
        else:
            with st.spinner("AI ƒëang ph√¢n t√≠ch..."):
                patient_context = f"- B·ªánh l√Ω n·ªÅn: {conditions or 'Kh√¥ng c√≥'}\n- D·ªã ·ª©ng: {allergies or 'Kh√¥ng c√≥'}"
                result = prescription.get_prescription_analysis(
                    st.session_state.firebase_db, st.session_state.user_info,
                    patient_context, prescription_text
                )
                st.session_state.analysis_result = result

    if st.session_state.analysis_result:
        st.markdown("---")
        st.subheader("K·∫øt qu·∫£ Ph√¢n t√≠ch")
        result_text = st.session_state.analysis_result
        if result_text.startswith("‚ùå"):
            st.error(result_text)
        else:
            st.markdown(result_text.replace("\n", "  \n"))

            if st.button("üìã Sao ch√©p k·∫øt qu·∫£ ph√¢n t√≠ch", key="copy_analysis_button"):
                try:
                    html_content = generate_styled_html(result_text)
                    copy_html_to_clipboard(html_content)
                    st.success("‚úÖ ƒê√£ sao ch√©p v√†o clipboard")
                except Exception as e:
                    st.error(f"‚ùå Kh√¥ng th·ªÉ sao ch√©p: {e}")
