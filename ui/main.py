import streamlit as st
from utils import drugs, firebase, constants, prescription

def render_lookup_page():
    st.header("Tra c·ª©u D∆∞·ª£c ƒëi·ªÉn üíä")
    is_logged_in = st.session_state.user_info is not None
    firebase_db = st.session_state.firebase_db
    user_info = st.session_state.user_info
    
    def run_lookup(drug_name):
        st.session_state.query_result = None
        is_pro = st.session_state.get("pro_access", False)
        with st.spinner(f"ƒêang tra c·ª©u '{drug_name}'..."):
            api_result, identified_name = drugs.get_drug_info_from_api(drug_name, is_pro)
            st.session_state.query_result = api_result
            if identified_name and "kh√¥ng ƒë∆∞·ª£c nh·∫≠n d·∫°ng" not in api_result:
                if is_logged_in:
                    updated_history = firebase.save_new_result(firebase_db, user_info, identified_name, api_result)
                    if updated_history is not None:
                        st.session_state.history = updated_history
                else:
                    st.session_state.guest_cache[identified_name] = api_result
                    if identified_name not in st.session_state.history:
                        st.session_state.history.insert(0, identified_name)
                        if len(st.session_state.history) > 10:
                            drug_to_remove = st.session_state.history.pop()
                            st.session_state.guest_cache.pop(drug_to_remove, None)

    search_query = st.text_input("Nh·∫≠p t√™n thu·ªëc:", key="lookup_input_field")
    
    if st.button("Tra c·ª©u"):
        if search_query:
            run_lookup(search_query)
        else:
            st.warning("Vui l√≤ng nh·∫≠p t√™n thu·ªëc tr∆∞·ªõc khi tra c·ª©u.")

    if st.session_state.query_result:
        result_to_display = st.session_state.query_result
        if result_to_display.startswith("‚ùå L·ªói:"):
            st.error(result_to_display)
        else:
            st.markdown(result_to_display)
            if is_logged_in:
                identified_name = result_to_display.split("**")[1] if "**" in result_to_display else None
                if identified_name:
                    st.markdown("---")
                    st.subheader(f"L∆∞u '{identified_name}' v√†o b·ªô s∆∞u t·∫≠p")
                    collections = st.session_state.get("collections", {})
                    if not collections:
                        st.info("B·∫°n ch∆∞a c√≥ b·ªô s∆∞u t·∫≠p n√†o.")
                    else:
                        col1, col2 = st.columns([2,1])
                        with col1:
                            sel_coll = st.selectbox("Ch·ªçn b·ªô s∆∞u t·∫≠p:", options=list(collections.keys()))
                        with col2:
                            st.write(""); st.write("")
                            if st.button("Th√™m thu·ªëc", use_container_width=True):
                                msg = firebase.add_drug_to_collection(firebase_db, user_info, sel_coll, identified_name)
                                st.toast(msg)
                                _, collections_new = firebase.load_user_data(firebase_db, user_info)
                                st.session_state.collections = collections_new
                                st.rerun()


def render_prescription_analysis_page():
    st.header("Ph√¢n t√≠ch ƒê∆°n thu·ªëc ü©∫")
    is_logged_in = st.session_state.user_info is not None
    
    if not is_logged_in:
        st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.")
        return
    
    st.subheader("Ph·∫ßn 1: B·ªëi c·∫£nh B·ªánh nh√¢n (Kh√¥ng b·∫Øt bu·ªôc)")
    col1, col2 = st.columns(2)
    with col1:
        conditions = st.text_area("T√¨nh tr·∫°ng b·ªánh l√Ω n·ªÅn:", height=150)
    with col2:
        allergies = st.text_area("D·ªã ·ª©ng thu·ªëc ƒë√£ bi·∫øt:", height=150)
        
    st.subheader("Ph·∫ßn 2: Th√¥ng tin ƒê∆°n thu·ªëc (B·∫Øt bu·ªôc)")
    prescription_text = st.text_area("D√°n n·ªôi dung ƒë∆°n thu·ªëc:", height=250)
    
    if st.button("Ph√¢n t√≠ch ƒê∆°n thu·ªëc", type="primary"):
        if not prescription_text.strip():
            st.error("Vui l√≤ng nh·∫≠p th√¥ng tin ƒë∆°n thu·ªëc.")
        else:
            with st.spinner("AI ƒëang ph√¢n t√≠ch..."):
                patient_context = f"- B·ªánh l√Ω n·ªÅn: {conditions or 'Kh√¥ng c√≥'}\n- D·ªã ·ª©ng: {allergies or 'Kh√¥ng c√≥'}"
                result = prescription.get_prescription_analysis(
                    st.session_state.firebase_db, st.session_state.user_info,
                    patient_context, prescription_text
                )
                st.session_state.analysis_result = result
    
    if st.session_state.analysis_result:
        st.markdown("---")
        st.subheader("K·∫øt qu·∫£ Ph√¢n t√≠ch")
        if st.session_state.analysis_result.startswith("‚ùå"):
             st.error(st.session_state.analysis_result)
        else:
            st.markdown(st.session_state.analysis_result)
